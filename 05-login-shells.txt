source: https://help.gnome.org/users/gnome-terminal/stable/pref-login-shell.html.en

    Shells in UNIX based systems can be started up in login and non-login modes:

        A _login shell_ is a shell given to a user upon login into their user account.
        This is initiated by

            using the `-l` or `--login` option
            [for example, as in `bash --login`],

            or placing a dash as the initial character of the command name
            [for example, as in `-bash`].

    Sub-shell

        A _sub-shell_, also called a _non-login shell_, is a shell started

            after the login process

            without the `-l` or `--login` option

            and without an extra dash before the command name.

    The general cases for having a login shell include:

        1. Accessing your computer remotely using SSH.

        2. Simulating an initial login shell with `bash -l` or `sh -l`.

        3. Simulating an initial root login shell with `sudo -i`.

source: https://www.linuxquestions.org/questions/programming-9/how-to-check-in-a-script-whether-the-shell-is-login-or-non-login-360629/

     How to check ... whether the shell is login or non-login?

     If using bash, try :
     ```
     shopt | grep login_shell
     ```

source: https://unix.stackexchange.com/questions/38175/difference-between-login-shell-and-non-login-shell

    A login shell is the first process
    that executes under your user ID when you log in for an interactive session.
    The login process tells the shell to behave as a login shell...
    Login shells typically read a file that does things like setting environment variables:
        /etc/profile and ~/.profile for the traditional Bourne shell,
        ~/.bash_profile additionally for bash†,
        /etc/zprofile and ~/.zprofile for zsh†,
        /etc/csh.login and ~/.login for csh, etc.

    † I'm simplifying a little, see the manual for the gory details. 

    ---

    [Both in Linux and in macOS,](?) When you log in
        on a text console(?),
        or through SSH,
        or with `su -`,
    you get an [(interactive)] login shell.

    [Both in Linux and in macOS,](?)
    When you log in in graphical mode (on an X display manager),
    you don't get a login shell,
    instead you get a session manager or a window manager.

    TODO: read

            https://linuxhandbook.com/login-shell/
            starts off where the previous remark left off
            but connects also to the following,
            which is more fundamental than the previous remark:
            https://www.linuxnix.com/how-login-process-work-in-linux/

    https://www.freedesktop.org/software/systemd/man/org.freedesktop.login1.html
    explains that
    `Type` encodes the session type. It's one of
        "`unspecified`" (for cron PAM sessions and suchlike),
        "`tty`" (for text logins)
        or "`x11`"/"`mir`"/"`wayland`" (for graphical logins).
    Combining this with https://unix.stackexchange.com/questions/202891/how-to-know-whether-wayland-or-x11-is-being-used
    means that the following command helps us determine which sessions are text-based
    or graphical:
        ```
        loginctl
        loginctl list-sessions

        loginctl show-session ${SESSIONID} | grep Type
        ```
    (replacing `${SESSIONID}` as appropriate)
    ---

    The program that starts the shell decides whether the shell acts as a login shell.

        [In Linux,] When you start a shell in a terminal in an existing session
        (screen, X terminal, Emacs terminal buffer, a shell inside another, etc.),
        you get an [(interactive)] non-login shell.
        That shell might read a shell configuration file
            (
            ~/.bashrc for bash invoked as bash,
            /etc/zshrc and ~/.zshrc for zsh,
            /etc/csh.cshrc and ~/.cshrc for csh,
            ...
            ).

        When a shell runs a script or a command passed on its command line,
        it's a [(non-interactive)] non-login shell.
        Such shells run all the time:
            it's very common that when a program calls another program,
            it really runs a tiny script in a shell to invoke that other program.
        Some shells read a startup file in this case
            (
            bash runs the file indicated by the BASH_ENV variable,
            zsh runs /etc/zshenv and ~/.zshenv
            ),
        but this is risky: the shell can be invoked in all sorts of contexts, and there's
        hardly anything you can do that might not break something.

        (
        source: https://unix.stackexchange.com/questions/38175/difference-between-login-shell-and-non-login-shell#comment384433_46856
        >> On [macOS], by default, [launching] the Terminal application runs a login shell...
           That's not normal way [i.e. that's not the default behavior] [in Linux].
        )

https://unix.stackexchange.com/questions/324359/why-a-login-shell-over-a-non-login-shell
    
    [In Linux]

        The idea is that a user should have (at most) one login shell per host.
        (Perhaps I should say, one login shell per host per terminal — if you are
        simultaneously logged in to a host through multiple terminals, you would expect
        to have multiple login shells.)

        This would typically (always?) be the first shell you get upon logging in (hence
        the name).

        So, this scheme allows you to specify actions that you want to happen only once
        per login and things that you want to happen every time you start a new
        (interactive) shell.



        Normally, "every other" shell you run after logging in
            will be a descendant (a child of a child of a child …) of the login shell,
            and therefore will inherit many settings ... from the login shell.
        And, accordingly, the idea is that

            the login initialization files (`.login`, `.profile`, etc.) should set the
            settings that are inheritable,

            and... `.bashrc` (or whatever else you use) [should] handle the ones that
            aren’t (set, shopt, non-exported shell variables, etc.)



        Another notion is that
        the login initialization files (and only they) should do “heavy lifting”,
        i.e., resource-intensive actions.



        You should probably avoid having a login shell that is subordinate to
        another login shell of the same type.

    [In macOS]

        As mentioned in https://unix.stackexchange.com/questions/38175/difference-between-login-shell-and-non-login-shell#comment384433_46856,
        the [macOS] Terminal application runs a login shell,
        so a typical user will typically have several “login shells” running simultaneously.

        This is a somewhat different model from the one I have described above,
        and may require the user to rethink what he does in his `.login` or `.profile`
        (or whatever) file.