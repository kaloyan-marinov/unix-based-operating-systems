source: https://linuxize.com/post/how-to-run-linux-commands-in-background/

    TODO: decide whether this entry should be
          (a) fused together with the same-resource entry in 07-background-processes.txt
          or (b) removed altogether

    If your connection drops or you log out of the shell session,
    the background processes are terminated.
    (?)[Doesn't a "clean exit" such as logout do nothing at all to the background processes?]
    
    There are several ways
    to keep the process running after the interactive shell session ends.

        One way is
        to remove the job from the shell’s job control using the `disown` shell builtin

        Another way to keep a process running after the shell (?)exit is to use `nohup`.
        The `nohup` command executes another program specified as its argument
        and [the so-created process] ignores all `SIGHUP` (hangup) signals.
        `SIGHUP` is a signal that is sent to a process
        when its controlling terminal is closed.

source: https://linuxize.com/post/linux-nohup-command/

    Using `nohup` in the foreground is not very useful
    because you won’t be able to interact with the shell until the command completes.

source: https://serverfault.com/questions/463366/does-getting-disconnected-from-an-ssh-session-kill-your-programs

    (Q by fregas):

        So, say I get disconnected from an SSH-session
        after I've started `rsync` or `cp` or any other command that can be long running.
        After I get disconnected, does that command keep running until it's finished ...
        or does it just get killed?

    (A by Andrew B):

        Edit for 2016:

        This Q&A predates the [systemd v230 debacle]( https://soylentnews.org/article.pl?sid=16/05/30/0235207 ).
            [which in turn links to https://lobste.rs/s/zr7qo4/systemd_kills_background_processes ]
        As of systemd v230,
        the new default is to kill all children of a terminating login session,
        regardless of what historically valid precautions were taken to prevent this.
        The behavior can be
            changed by setting `KillUserProcesses=no` in `/etc/systemd/logind.conf`,
            or circumvented using the systemd-specific mechanisms for starting a daemon
            in userspace.
        Those mechanisms are outside the scope of this question.

        ---

        [
        The text below describes how things have traditionally worked in UNIX
        designspace for longer than Linux has existed.
        ]

        They will get killed, but not necessarily immediately.
        It depends on how long it takes for the SSH daemon
        to decide that your connection is dead.
        What follows is a longer explanation that will help you understand
        how it actually works.

        When you logged in,
        the SSH daemon allocated a pseudo-terminal for you
        and attached it to your user's configured login shell.
        This is called the controlling terminal.
        Every program you start normally at that point,
        no matter how many layers of shells deep,
        will ultimately trace its ancestry back to that shell.
        You can observe this with the `pstree` command.

        When the SSH daemon process associated with your connection
        decides that your connection is dead,
        it sends a hangup signal (`SIGHUP`) to the login shell.
        This notifies the shell that you've vanished
        and that it should begin cleaning up after itself.
        What happens at this point is shell specific
        (search its documentation page for "HUP"),
        but for the most part it will start sending `SIGHUP` to running jobs
        associated with it before terminating.
        Each of those processes, in turn, will do
        whatever they're configured to do on receipt of that signal.
        Usually that means terminating.
        If those [processes] have [child processes] of their own,
        the signal will often get passed along as well.

        The processes that survive a hangup of the controlling terminal are
            - ones that either disassociated themselves from having a terminal
              (daemon processes that you started inside of it),
            - or ones that were invoked with a prefixed `nohup` command.
              (i.e. "don't hang up on this")
        Daemons interpret the HUP signal differently; since they
            - do not have a controlling terminal
            - and do not automatically receive a HUP signal,
        it is instead repurposed as a manual request from the administrator
        (?) to reload the configuration.
        Ironically this means that most admins don't learn the "hangup" usage
        of this signal for non-daemons until much, much later. That's why you're reading this!

        Terminal multiplexers are a common way of keeping your shell environment intact
        between disconnections.
        They allow you to detach from your shell processes
        in a way that you can reattach to them later,
        regardless of whether that disconnection was accidental or deliberate.
        `tmux` and `screen` are the more popular ones;
        syntax for using them is beyond the scope of your question,
        but they're worth looking into.

    (A by Michael Hampton):

        ... any programs still attached to the terminal,
        and not placed into the background with something like `nohup`,
        would be killed.

        This is why
        there are virtual terminal solutions like `tmux` and the older `screen`
        which create sessions which continue running even if you are disconnected,
        and to which you can reattach later.

    (A by slm):

        As [others] have mentioned,
        once you disconnect from ssh anything running within it is gone.

        As @Michael Hampton and others have mentioned[,]
        you can use tools like `tmux` or `screen`
        to disconnect/reconnect to terminals without [losing] their content
        (i.e. child processes).

        Additionally[,] you can put a process into the background using an ampersand `&`
        and then use the command `disown` to disassociate them with the current shell.
        ```
        # start a command
        % sleep 5000 &
        [1] 3820

        # check it
        % jobs
        [1]+  Running                 sleep 5000 &

        # disown everything
        % disown -a

        # check it again (gone from shell)
        % jobs
        %

        # but it's still running on the system
        % ps -eaf|grep "[s]leep"
        saml      3820 23791  0 00:16 pts/1    00:00:00 sleep 5000
        %

        ```

source: https://serverfault.com/questions/115968/ssh-session-drops-does-the-command-continue-executing

    (Q by Miko):

        If I was running a command [on a remote machine]
        before the SSH connection was dropped,
        will the command continue executing?
    
    (A by Warner):

        In most cases, no.
        Processes will be sent a SIGHUP [signal] on loss of terminal.
        You can prefix [your/the] command with `nohup`
        [which causes the process created by executing the command to ignore the signal.]

    (A by Dave Cheney):

        As Warner says above,
        the child of the SSH daemon (that is the login shell and [its] children)
        will get `SIGHUP`,
        but they won't get them instantly.
        There will be a delay, sometimes in minutes[,]
        before the SSH daemon on the server side gives up on your connection.
        During that time the process will continue to run.

        As Warner also said,
        the process can choose to ignore `SIGHUP`,
        in which case it will continue to run
        until it has to request input and then find `STDIN` has closed.

    (A by geekifier):

        TODO: post a question about this

              hasn't each of the following been rendered inaccurate
              by what the previous source called "the systemd v230 debacle"?
              https://serverfault.com/a/183363
              https://serverfault.com/a/115980

        I'll add another heplful suggestion to the thread

        If you already started a process that will take a long time ...
        and forgot to include `nohup` in front of it,
        you can still prevent it from terminating on (?)logoff.

        Here are the steps:

            1. Press *Ctrl + Z* - this will suspend the job
            2. Enter `disown -h %x`,
               where `x` is the job number you get after suspending the job
            3. Execute `bg` to put the job in the background
            4. (?)Exit the shell and go on with your life :).

            Comment by njahnke:

                ... (?) log out ...
    
    (A by zahid):

        [cites the (A by Andrew B), which has already been summarized in this file]

source: https://serverfault.com/questions/117152/do-background-processes-get-a-sighup-when-logging-off

    (Q by Massimo):

        looks like it really doesn't matter
        if this is done at the physical console or via SSH ...
        The behavior is exactly the same:

            - Start a process in the background using `&`
              (or put it in background after it's started using `CTRL-Z` and `bg`);
              **this is done without using `nohup`**.
            - Log off.
            - Log on again.
            - The process is still there, running happily,
              and is now a direct child of `init`.

        [By contrast, the started process] quits immediately
        if sent a `SIGHUP` ... using `kill -HUP`.

        So, it really looks like `SIGHUP` is not sent upon logoff
        ... to background processes

        The question is, again:
        shouldn't a `SIGHUP` be sent to processes, even if they're running in background,
        upon logging off?
        Why is this not happening?

    (A by Massimo):

        [If your BASH instance is an interactive login shell,
        whether `SIGHUP` signals get sent
        to the BASH instance's child processes which are running in the background
        ultimately] depends on the `huponexit` shell option,
        which can be viewed and/or set using the built-in `shopt` command.

        [From] the BASH man page:

            The shell exits by default upon receipt of a `SIGHUP`.
            Before exiting,
            an interactive shell resends the `SIGHUP` to all jobs, running or stopped.
            Stopped jobs are sent SIGCONT to ensure that they receive the `SIGHUP`.
            To prevent the shell from sending the `SIGHUP` signal to a particular job,
            it should be
                - removed from the jobs table with the `disown` builtin (see Job Control Builtins)
                - or marked to not receive `SIGHUP` using `disown -h`.

            If the `huponexit` shell option has been set with `shopt`,
            BASH sends a `SIGHUP` to all jobs
            when an interactive login shell exits. 
    
        (C by CarpeNoctem):

            Verified.
            
            When I performed an "exit", "logout", or CTL-D[,]
            the child proc (job) would not receive a `SIGHUP` (both root and reg user).
            However when I did "kill -HUP $$" to kill the current instance of BASH[,]
            the child processes DID receive a `SIGHUP`.
            
            I then set `huponexit`[,] and the child process did receive `SIGHUP` upon exit.

    (A by Kyle Brandt):

        [   
            For starters, note that
            `strace` exists on Linux (specifically on Ubuntu 18.04) but not on macOS.
        ]

        Shell1:
            [start a process in the background]

        Shell2:
            strace -e trace=signal -p <the-process-id-of-the-started-background-process>

        Shell1 Again:
            [perform one of the following "exit actions":]
                [- issue] exit
                [- issue] logout
                [- type/press] "CTRL + D"

                [- issue] kill -HUP $$
                [- close the window]
                   [in the case of an SSH session,
                   does this simulate/emulate/mirror the session being dropped?]
        
        Shell2 Again:
            [read here whether any signals have just been sent
            to the started background process]

        [
            the answer by @Kyle and the comments on it indicate that
            the results depend on the shell instance (BASH vs ZSH)
            which is used to start the background process
        ]

    (A by Mike S):

        you start a job in a terminal...
        
        if you close that terminal without "exiting the shell cleanly",
        the _terminal_ sends (?)(part-1)BASH the `SIGHUP` signal (?)(part-2)to the shell,
        which then sends it to all children.
        
        If you "exit the shell cleanly"
        - meaning the job must already be in the background
         so you can type `exit` or hit `Control-D` at the command prompt -
        no signals of any sort are sent to the background job from BASH.

        Interestingly, I set `huponexit` to be on with `shopt -s huponexit; shopt`
        (the latter `shopt` to review), then performed the last test,
        and again BASH sent no signal to the background process...
        It seems as though `huponexit` had no bearing one way or the other.
        (?)
        [
            as noted in [A by Massimo] above,
            the `huponexit` shell option is in effect only for interactive login shells

            in your case, does `shopt | grep huponexit` have a value of `on` or `off`?            
        ]

source: https://serverfault.com/questions/115999/if-i-launch-a-background-process-and-then-log-out-will-it-continue-to-run

    (Q by Massimo):

        [
            This is an older but content-wise identical copy
            of the question at (the start of) the previous resource.
        
            While some of the answers duplicate what has already been written in this file,
            I am going to repeat some of those answers
            whose wording I consider clear and concise.
        ]

    (A by Warner):

        When you fork a process into the background[,]
        it will still be the child process from the shell executing it.

        All child processes running under a shell are sent a `SIGHUP` upon exit.
        Performance varies slightly depending upon the exact situation,
        which is detailed verbosely in BASH's man page.
        Other shells likely have similar descriptions.

        Apache, and other daemons, typically reload configuration on `SIGHUP`.
        Userspace utilities often die.
        Application performance linked to signals can be unique to the application.

        (C by Massimo):

            So the process should just have received a `SIGHUP` in this case, right?
            Maybe it just ignored it, I'll check.

        (C by Warner):

            Yes, exactly. That's what I believe the situation to be.
            If you really doubt the documented performance,
            you could hack out a little script to trap the signal and log it.

            [
                It is worth noting that the previous resource contains an [A by Mike S].
                That answer includes a script that traps the signal -
                for convenience, the script is as follows:
                ```
                #!/bin/bash

                imhupped() {
                        echo "HUP" >> /tmp/outfile
                }

                trap imhupped SIGHUP

                for i in $(seq 1 6); do echo out $i >> /tmp/outfile; sleep 5; done
                ```
            ]

    (A by Warner):

        See:

        https://serverfault.com/questions/115968/ssh-session-drops-does-the-command-continue-executing

        [which has already been summarized in this file]

        (C by Massimo):

            That post actually ispired me to ask the question.

source: https://unix.stackexchange.com/questions/84737/in-which-cases-is-sighup-not-sent-to-a-job-when-you-log-out

    (Q by slhck):
        [
            This question and its accepted answer seem to duplicate the last resource
            (as well as the second-to-last one).
        ]

        (C by Boris Burkov):
    
            [
                This comment actually refers to the previous resource,
                which is welcomed by the OP.
            ]

    (A by Raphael Ahrens):

        BASH seems to send the `SIGHUP`
        only if it [itself] received a `SIGHUP`, which for example occurs
            - when a virtual terminal is closed
            - or when the SSH connection is interrupted.

        So if you type `exit` or press `Ctrl + D`[,]
        this does not send a hang up signal to the BASH[,]
        [which implies/ensures that] all background process will remain.

        You can force BASH to warn you about the fact that
        there are still running background processes with
        ```
        shopt -s checkjobs
        ```
    
        (C by slhck):

            So,
            when an SSH connection interrupts, `SIGHUP` is sent[;]
            otherwise, with a clean exit, jobs continue running[.]
